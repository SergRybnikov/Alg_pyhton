"""
Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах
в рамках первых трех уроков. Проанализировать результат и определить программы с наиболее
эффективным использованием памяти.

 Windows 11 Pro версия 21H2 х64
 Python 3.10 x64

 Выбрана задача 1-1. Найти сумму и произведение цифр трехзначного числа, которое вводит пользователь.
"""

import sys


def memory_count(lst):
    memory = 0

    for var in lst:
        print('********************')
        print(f'Переменная: {var}')
        print('Весит: ', sys.getsizeof(var))
        spam = sys.getsizeof(var)

        if hasattr(var, '__iter__') and not isinstance(var, str):

            if hasattr(var, 'keys'):
                for key, value in var.items():
                    print(f'\nКлюч: \'{key}\' значение {value}')
                    spam += memory_count([key]) + memory_count([value])

            else:
                spam += memory_count(var)

        memory += spam

    return memory


# a = int(input('Введите целое трехзначное число:'))
#
# hundred = a // 100
# dozen = (a // 10) % 10
# unit = a % 10
#
# summa = hundred + dozen + unit
# mult = hundred * dozen * unit
#
# print(f'Сумма цифр в числе: {summa}')
# print(f'Произведение цифр в числе: {mult}')
#
# Переменные:  [647, 4, 6, 168, 17, 7]
# Затраты памяти программы:  168

########################################################################################

# a = int(input('Введите целое трехзначное число:'))
#
# summa = (a // 100) + ((a // 10) % 10) + (a % 10)
# mult = (a // 100) * ((a // 10) % 10) * (a % 10)
#
# print(f'Сумма цифр в числе: {summa}')
# print(f'Произведение цифр в числе: {mult}')
#
# Переменные:  [647, 168, 17]
# Затраты памяти программы:  84

#########################################################################################

# a = int(input('Введите целое трехзначное число:'))
#
# print(f'Сумма цифр в числе: {(a // 100) + ((a // 10) % 10) + (a % 10)}')
# print(f'Произведение цифр в числе: {(a // 100) * ((a // 10) % 10) * (a % 10)}')
#
# Переменные:  [647]
# Затраты памяти программы:  28


# ВЫВОД: На этом примере видно, что чем меньше переменных, тем быстрее работает код, но это даёт минус
# на читабельности кода. Так что в этом варианте можно остановиться на втором решении.


_variable = []
for i in dir():
    if i[0] != '_' and not hasattr(locals()[i], '__name__'):
        _variable.append(locals()[i])

print('\nПеременные: ', _variable, '\n')
print('\nЗатраты памяти программы: ', memory_count(_variable))
